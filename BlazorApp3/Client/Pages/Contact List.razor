@page "/contactList"
@using BlazorApp3.Shared.Models
@inject ContactDataStorage ContactDataStorage

<h3>Contact List</h3>

<input type="text" @bind="filterText" placeholder="Search..." class="form-control mb-3" />
<button class="btn btn-primary" @onclick="CreateContact">Create New Contact</button>

<table class="table mt-3">
    <thead>
        <tr>
            <th><a href="#" @onclick="() => SortContacts(nameof(Contact.FirstName))">First Name</a></th>
            <th><a href="#" @onclick="() => SortContacts(nameof(Contact.LastName))">Last Name</a></th>
            <th><a href="#" @onclick="() => SortContacts(nameof(Contact.Email))">Email</a></th>
            <th><a href="#" @onclick="() => SortContacts(nameof(Contact.PhoneNumber))">Phone Number</a></th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in FilteredContacts())
        {
            <tr>
                <td>@contact.FirstName</td>
                <td>@contact.LastName</td>
                <td>@contact.Email</td>
                <td>@contact.PhoneNumber</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditContact(contact.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmDeleteContact(contact.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showForm)
{
    <EditForm Model="@editingContact" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="editingContact.FirstName" />
            <ValidationMessage For="@(() => editingContact.FirstName)" />
        </div>
        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="editingContact.LastName" />
            <ValidationMessage For="@(() => editingContact.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="editingContact.Email" />
            <ValidationMessage For="@(() => editingContact.Email)" />
        </div>
        <div class="form-group">
            <label for="phoneNumber">Phone Number</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="editingContact.PhoneNumber" />
            <ValidationMessage For="@(() => editingContact.PhoneNumber)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@if (showDeleteConfirmation)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this contact?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteContact">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Contact> contacts;
    private Contact editingContact = new Contact();
    private bool showForm;
    private bool showDeleteConfirmation;
    private int deleteContactId;
    private bool sortAscending = true;
    private string currentSortField;
    private string filterText = string.Empty;

    protected override void OnInitialized()
    {
        contacts = ContactDataStorage.GetContacts();
    }

    private void CreateContact()
    {
        editingContact = new Contact();
        showForm = true;
    }

    private void EditContact(int id)
    {
        editingContact = ContactDataStorage.GetContact(id);
        showForm = true;
    }

    private void ConfirmDeleteContact(int id)
    {
        deleteContactId = id;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        deleteContactId = 0;
        showDeleteConfirmation = false;
    }

    private void DeleteContact()
    {
        ContactDataStorage.DeleteContact(deleteContactId);
        contacts = ContactDataStorage.GetContacts();
        showDeleteConfirmation = false;
    }

    private void HandleValidSubmit()
    {
        try
        {
            if (editingContact.Id == 0)
            {
                ContactDataStorage.AddContact(editingContact);
            }
            else
            {
                ContactDataStorage.UpdateContact(editingContact);
            }
            contacts = ContactDataStorage.GetContacts();
            showForm = false;
        }
        catch (Exception ex)
        {
            // Handle errors, for example, log them and show a message to the user.
            Console.WriteLine(ex.Message);
        }
    }

    private void Cancel()
    {
        showForm = false;
    }

    private void SortContacts(string field)
    {
        if (currentSortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortField = field;
            sortAscending = true;
        }

        var propertyInfo = typeof(Contact).GetProperty(field);
        if (propertyInfo != null)
        {
            if (sortAscending)
            {
                contacts = contacts.OrderBy(c => propertyInfo.GetValue(c, null)).ToList();
            }
            else
            {
                contacts = contacts.OrderByDescending(c => propertyInfo.GetValue(c, null)).ToList();
            }
        }
    }

    private IEnumerable<Contact> FilteredContacts()
    {
        if (string.IsNullOrWhiteSpace(filterText))
        {
            return contacts;
        }

        return contacts.Where(c =>
            c.FirstName.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
            c.LastName.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
            c.Email.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
            c.PhoneNumber.Contains(filterText, StringComparison.OrdinalIgnoreCase));
    }
}